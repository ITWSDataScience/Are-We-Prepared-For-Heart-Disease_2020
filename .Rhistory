c1 <- runif(10)
c2 <- runif(10)
gauss.centers <- data.frame(c1,c2)
sample(1:10,1)
sample(1:10,1)
sample(1:10,1)
sample(1:10,1)
sample(1:10,1)
require(MASS)
train.gauss <- c()
train.gauss <- c()
for(i in 1:no_points){
temp <- mvrnorm(1, gauss.centers[sample(1:nrow(gauss.centers)),], Sigma = .1 * diag(2))
train.gauss <- rbind(train.gauss, temp)
}
train.gauss <- c(x1 = numeric(), x2 = numeric())
for(i in 1:no_points){
temp <- mvrnorm(1, gauss.centers[sample(1:nrow(gauss.centers)),], Sigma = .1 * diag(2))
train.gauss <- rbind(train.gauss, temp)
}
mrnorm(1, gauss.centers[1,], Sigma = .1 * diag(2))
mvrnorm(1, gauss.centers[1,], Sigma = .1 * diag(2))
gauss.centers[1,]
as.vector(gauss.centers[1,])
mvrnorm(1, as.vector(gauss.centers[1,],) Sigma = .1 * diag(2))
mvrnorm(1, as.vector(gauss.centers[1,]), Sigma = .1 * diag(2))
mvrnorm(1, mu = as.vector(gauss.centers[1,]), Sigma = .1 * diag(2))
typeof(rep(0,2))
rep(0,2)
typeof(gauss.centers[1,])
typeof(as.vector(gauss.centers[1,]))
typeof(as.double(gauss.centers[1,]))
mvrnorm(1, mu = as.double(gauss.centers[1,]), Sigma = .1 * diag(2))
for(i in 1:no_points){
temp <- mvrnorm(1, as.double(gauss.centers[sample(1:nrow(gauss.centers)),]), Sigma = .1 * diag(2))
train.gauss <- rbind(train.gauss, temp)
}
as.double(gauss.centers[1,])
as.double(gauss.centers[sample(1:norw(gauss.centers)),])
as.double(gauss.centers[sample(1:nrow(gauss.centers)),])
sample(1:nrow(gauss.centers))
sample(1,nrow(gauss.centers))
sample(1,1:nrow(gauss.centers))
sample(1,1:nrow(gauss.centers))
sample(1,1:nrow(gauss.centers))
sample(1,1:nrow(gauss.centers))
sample(1:nrow(gauss.centers),1)
sample(1:nrow(gauss.centers),1)
for(i in 1:no_points){
temp <- mvrnorm(1, as.double(gauss.centers[sample(nrow(gauss.centers),1),]), Sigma = .1 * diag(2))
train.gauss <- rbind(train.gauss, temp)
}
View(train.gauss)
names(train.gauss) <- c("x1", "x2")
ggplot(data = train.gauss, aes(x=x1,y=x2)) + geom_point() #initial scatter plot
train.gauss <- data.frame(x1 = numeric(), x2 = numeric())
for(i in 1:no_points){
temp <- mvrnorm(1, as.double(gauss.centers[sample(nrow(gauss.centers),1),]), Sigma = .1 * diag(2))
train.gauss <- rbind(train.gauss, temp)
}
names(train.gauss) <- c("x1", "x2")
ggplot(data = train.gauss, aes(x=x1,y=x2)) + geom_point() #initial scatter plot
ggplot(data = gauss.centers, aes(x=c1,y=c2)) + geom_point()
mvrnorm(1, as.double(gauss.centers[sample(nrow(gauss.centers),1),]), Sigma = .1 * diag(2))
ggplot(data = train.gauss, aes(x=x1,y=x2)) + geom_point() #initial scatter plot
.1 *diag(2)
train.gauss <- data.frame(x1 = numeric(), x2 = numeric())
for(i in 1:no_points){
temp <- mvrnorm(1, as.double(gauss.centers[sample(nrow(gauss.centers),1),]), Sigma = .1 * diag(2))
train.gauss <- rbind(train.gauss, temp)
}
names(train.gauss) <- c("x1", "x2")
ggplot(data = gauss.centers, aes(x=c1,y=c2)) + geom_point()
ggplot(data = train.gauss, aes(x=x1,y=x2)) + geom_point() #initial scatter plot
throwaway <- mvnorm(1, rep(0,2), Sigma = .1 * diag(2))
throwaway <- mvrnorm(1, rep(0,2), Sigma = .1 * diag(2))
throwaway
throwaway = throwaway + gauss.centers[1,]
thowaway
throwaway
throwaway <- mvrnorm(1, rep(0,2), Sigma = .1 * diag(3))
throwaway <- mvrnorm(1, rep(0,2), Sigma = .1 * diag(1))
throwaway <- mvrnorm(1, rep(0,2), Sigma = .1 * diag(2))
ggplot(data = train.gauss, aes(x=x1,y=x2)) + geom_point() +  geom_point(data = gauss.centers, aes(x=c1,y=c2,color="red", size = 1.5))#initial scatter plot
function (file, header = FALSE, sep = "", quote = "\"'", dec = ".",
numerals = c("allow.loss", "warn.loss", "no.loss"), row.names,
col.names, as.is = !stringsAsFactors, na.strings = "NA",
colClasses = NA, nrows = -1, skip = 0, check.names = TRUE,
fill = !blank.lines.skip, strip.white = FALSE, blank.lines.skip = TRUE,
comment.char = "#", allowEscapes = FALSE, flush = FALSE,
stringsAsFactors = default.stringsAsFactors(), fileEncoding = "",
encoding = "unknown", text, skipNul = FALSE)
#----------------------------------------------------------------------------
# White Wine Dataset
#----------------------------------------------------------------------------
wine.raw <-  read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv", sep = ";", header = T)
#----------------------------------------------------------------------------
# White Wine Dataset
#----------------------------------------------------------------------------
wine.raw <-  read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv", sep = ";", header = T)
fivenum(wine.raw)
summary(wine.raw)
hist(wine.raw$fixed.acidity)
hist(wine.raw$volatile.acidity)
hist(wine.raw$citric.acid)
hist(wine.raw$residual.sugar)
hist(wine.raw$ chlorides)
hist(wine.raw$free.sulfur.dioxide)
hist(wine.raw$total.sulfur.dioxide)
hist(wine.raw$density)
hist(wine.raw$pH)
acidity.lm <- lm(pH ~ citric.acid, data = wine.raw)
plot(pH ~ citric.acid, data = wine.raw)
abline(acidity.lm)
unique(wine.raw$citric.acid)
hist(wine.raw$sulphates)
hist(wine.raw$alcohol)
hist(wine.raw$quality)
general.lm <- lm(quality ~ ., data = wine.raw)
general.lm <- lm(quality ~ ., data = wine.raw)
summary(general.lm)
citric.lm <- lm(quality ~ citric.acid, data = wine.raw)
citric.lm <- lm(quality ~ citric.acid, data = wine.raw)
plot(quality ~ citric.acid, data = wine.raw)
abline(citric.lm)
alcohol.lm <- lm(quality ~ alcohol, data = wine.raw)
plot(quality ~ alcohol, data = wine.raw)
abline(alcohol.lm)
# changed quality column to factor
wine.process <- wine.raw
wine.process$quality <- as.factor(wine.process$quality)
color <- ggplot(wine.process, aes(x = volatile.acidity, y = alcohol, color = quality)) + geom_point()
color
color <- ggplot(wine.process, aes(x = alcohol, y = density, color = quality)) + geom_point()
color
color <- ggplot(wine.process, aes(x = alcohol, y = pH, color = quality)) + geom_point()
color
general.lm <- lm(quality ~ ., data = wine.raw)
summary(general.lm)
setwd(choose.dir())
help(read.csv)
read.csv("Health_insurance.csv", header = T, sep = ",")
health_insurance <- read.csv("Health_insurance.csv", header = T, sep = ",")
heart_disease <- read.csv("Heart_disease_mortality_rate.csv", header = T, sep = ",")
hospital_beds <- read.csv("Hospital_beds.csv", header = T, sep = ",")
setwd(choose.dir())
health_insurance <- read.csv("Health_insurance.csv", header = T, sep = ",")
heart_disease <- read.csv("Heart_disease_mortality_rate.csv", header = T, sep = ",")
hospital_beds <- read.csv("Hospital_beds.csv", header = T, sep = ",")
unique(health_insurance$GEO_NAME)
health_insurance[which(health_insurance$GEO_PARENT_NAME = "Alabama"),]
health_insurance[which(health_insurance$GEO_PARENT_NAME == "Alabama"),]
health_insurance[which(health_insurance$GEO_PARENT_NAME == "Alabama"),]$GEO_NAME
heart_disease[which(heart_disease$LocationAbbr == "AL"),]$LocationDesc
unique(heart_disease[which(heart_disease$LocationAbbr == "AL"),]$LocationDesc)
heart_disease[which(heart_disease$LocationDesc == "Alabama"),]
health_insurance[which(health_insurance$GEO_PARENT_NAME == "Alabama"),]$GEO_NAME
unique(heart_disease[which(heart_disease$LocationAbbr == "AL"),]$LocationDesc)
unqiue(hospital_beds[which(hospital_beds$HQ_STATE == "AL"),]$COUNTY_NAME)
unique(hospital_beds[which(hospital_beds$HQ_STATE == "AL"),]$COUNTY_NAME)
sort(unique(hospital_beds[which(hospital_beds$HQ_STATE == "AL"),]$COUNTY_NAME))
unique(heart_disease)
for(i in 1:length(heart_disease)){
unique(heart_disease[,i])
}
heart_disease[,i]
heart_disease[,1]
heart_disease[,2]
for(i in 1:length(heart_disease)){
print(unique(heart_disease[,i]))
}
for(i in 1:8){
print(unique(heart_disease[,i]))
}
for(i in 1:7){
print(unique(heart_disease[,i]))
}
print(unique(heart_disease[,1]))
unique(heart_disease[,3])
unique(heart_disease[,4])
unique(heart_disease[,5])
unique(heart_disease[,6])
unique(heart_disease[,7])
unique(heart_disease[,8])
unique(heart_disease[,9])
unique(heart_disease[,10])
unique(heart_disease[,11])
unique(heart_disease[,12])
unique(heart_disease[,13])
unique(heart_disease[,14])
unique(heart_disease[,15])
unique(heart_disease[,16])
unique(heart_disease[,17])
unique(heart_disease[,18])
unique(heart_disease[,19])
unique(heart_disease[,20])
unique(heart_disease[,21])
heart_disease[,c(1,5,6,7,9,10,11,12,18,19,20,21)] <- NULL
setwd(choose.dir())
health_insurance <- read.csv("Health_insurance.csv", header = T, sep = ",")
heart_disease <- read.csv("Heart_disease_mortality_rate.csv", header = T, sep = ",")
hospital_beds <- read.csv("Hospital_beds.csv", header = T, sep = ",")
health_insurance[which(health_insurance$GEO_PARENT_NAME == "Alabama"),]$GEO_NAME
unique(heart_disease[which(heart_disease$LocationAbbr == "AL"),]$LocationDesc)
sort(unique(hospital_beds[which(hospital_beds$HQ_STATE == "AL"),]$COUNTY_NAME))
print(unique(heart_disease[,1]))
unique(heart_disease[,14])
unique(heart_disease[,13])
unique(heart_disease[,14])
unique(heart_disease[,15])
unique(heart_disease[,16])
heart_disease[,c(1,5,6,7,9,10,11,12,13,15,17,18,19,20)] <- NULL
names(heart_disease)
names(heart_disease)[c(5,6)] <- c("Gender", "Race/Ethnicity")
names(heart_disease)
health_insurance
health_insurance[1,]
health_insurance[1,68]
health_insurance[1,67]
health_insurance[1,69]
39594 + 18191
health_insurance[1,65]
health_insurance[1,60]
health_insurance[1,61]
health_insurance[1,62]
health_insurance[1,63]
health_insurance[1,64]
health_insurance[1,70]
health_insurance[1,71]
health_insurance[1,72]
health_insurance[1,73]
health_insurance[1,74]
health_insurance[1,75]
health_insurance[,c(-3,-4,-75,-83,-84)] <- NULL
state_codes <- read.csv("state_codes.csv", header = F, sep = ",")
names(state_codes) <- c("code", "Full")
state_codes[,1]
health_insurance[1,2[]]
health_insurance[1,2
]
state_codes[,1]
# converting state identifiers to the two letter code
for(i in 1:nrow(health_insurance)){
health_insurance[i,2] = state_codes[which(state_codes[,2] == health_insurance[i,2]),1]
}
which(state_codes[,2] == health_insurance[1,2])
health_insurance[1,2[]]
health_insurance[1,2
]
unique(health_insurance[,2])
state_codes <- read.csv("state_codes.csv", header = F, sep = ",")
names(state_codes) <- c("code", "Full")
health_insurance[1,2]
state_codes[3,1]
health_insurance <- read.csv("Health_insurance.csv", header = T, sep = ",")
heart_disease <- read.csv("Heart_disease_mortality_rate.csv", header = T, sep = ",")
hospital_beds <- read.csv("Hospital_beds.csv", header = T, sep = ",")
state_codes <- read.csv("state_codes.csv", header = F, sep = ",")
names(state_codes) <- c("code", "Full")
health_insurance[which(health_insurance$GEO_PARENT_NAME == "Alabama"),]$GEO_NAME
unique(heart_disease[which(heart_disease$LocationAbbr == "AL"),]$LocationDesc)
sort(unique(hospital_beds[which(hospital_beds$HQ_STATE == "AL"),]$COUNTY_NAME))
print(unique(heart_disease[,1]))
heart_disease[,c(1,5,6,7,9,10,11,12,13,15,17,18,19,20)] <- NULL
names(heart_disease)[c(5,6)] <- c("Gender", "Race/Ethnicity")
# Health Insurance data set
# Dropping all columns except location data and percent of population with No Health Insurance Coverage
# Keeping:
# col 3 - County Name
# col 4 - State Name
# col 75 - Total Civilian Noninstitutionalize Population - with public coverage
# col 83 - % of population with no health insurance coverage
# col 84 - margin of error for col 83
health_insurance[,c(-3,-4,-75,-83,-84)] <- NULL
health_insurance[2,1]
health_insurance[2,2]
health_insurance[1,2]
state_codes[1,1]
state_codes[2,1]
state_codes[2,2]
state_codes[1,2]
state_codes[4,2]
# converting state identifiers to the two letter code
for(i in 1:nrow(health_insurance)){
new_code = state_codes[which(state_codes[,2] == health_insurance[i,2]),1]
if(length(new_code) > 1){
print("wtf")
}
health_insurance[i,2] = new_code
}
health_insurance <- read.csv("Health_insurance.csv", header = T, sep = ",")
# Health Insurance data set
# Dropping all columns except location data and percent of population with No Health Insurance Coverage
# Keeping:
# col 3 - County Name
# col 4 - State Name
# col 75 - Total Civilian Noninstitutionalize Population - with public coverage
# col 83 - % of population with no health insurance coverage
# col 84 - margin of error for col 83
health_insurance[,c(-3,-4,-75,-83,-84)] <- NULL
# converting state identifiers to the two letter code
for(i in 1:nrow(health_insurance)){
new_code = state_codes[which(state_codes[,2] == health_insurance[i,2]),1]
if(length(new_code) != 1){
print("wtf")
}
health_insurance[i,2] = new_code
}
health_insurance <- read.csv("Health_insurance.csv", header = T, sep = ",")
# Health Insurance data set
# Dropping all columns except location data and percent of population with No Health Insurance Coverage
# Keeping:
# col 3 - County Name
# col 4 - State Name
# col 75 - Total Civilian Noninstitutionalize Population - with public coverage
# col 83 - % of population with no health insurance coverage
# col 84 - margin of error for col 83
health_insurance[,c(-3,-4,-75,-83,-84)] <- NULL
# converting state identifiers to the two letter code
for(i in 1:nrow(health_insurance)){
new_code = state_codes[which(state_codes[,2] == health_insurance[i,2]),1]
if(length(new_code) != 1){
print("wtf")
}
#health_insurance[i,2] = new_code
}
health_insurance <- read.csv("Health_insurance.csv", header = T, sep = ",")
View(health_insurance)
# Health Insurance data set
# Dropping all columns except location data and percent of population with No Health Insurance Coverage
# Keeping:
# col 3 - County Name
# col 4 - State Name
# col 75 - Total Civilian Noninstitutionalize Population - with public coverage
# col 83 - % of population with no health insurance coverage
# col 84 - margin of error for col 83
health_insurance[,c(-3,-4,-75,-83,-84)] <- NULL
# converting state identifiers to the two letter code
for(i in 1:nrow(health_insurance)){
new_code = state_codes[which(state_codes[,2] == health_insurance[i,2]),1]
if(length(new_code) != 1){
fuck_this <- 6 + 2
print("wtf")
}
#health_insurance[i,2] = new_code
}
nrow(health_insurance)
View(health_insurance)
# converting state identifiers to the two letter code
for(i in 1:nrow(health_insurance)){
new_code = state_codes[which(state_codes[,2] == health_insurance[i,2]),1]
health_insurance[i,2] = new_code
}
View(health_insurance)
View(state_codes)
state_codes[which(state_codes[1,] == 'DC'),2] <- "District of Columbia"
View(state_codes)
which(state_codes[1,] == 'DC')
which(state_codes[1,] == "DC")
state_codes[1,]
state_codes[which(state_codes[1,] == "DC"),2] <- "District of Columbia"
View(state_codes)
state_codes[,1]
state_codes[,1] == "DC"
Which(state_codes[,1] == "DC")
which(state_codes[,1] == "DC")
state_codes[15,2]
state_codes[which(state_codes[1,] == "DC"),2] <- "District of Columbia"
state_codes[15,2]
state_codes[which(state_codes[1,] == "DC"),2]
state_codes[which(state_codes[,1] == "DC"),2] <- "District of Columbia"
state_codes[which(state_codes[1,] == "DC"),2]
View(state_codes)
health_insurance <- read.csv("Health_insurance.csv", header = T, sep = ",")
state_codes <- read.csv("state_codes.csv", header = F, sep = ",")
names(state_codes) <- c("code", "Full")
# Health Insurance data set
# Dropping all columns except location data and percent of population with No Health Insurance Coverage
# Keeping:
# col 3 - County Name
# col 4 - State Name
# col 75 - Total Civilian Noninstitutionalize Population - with public coverage
# col 83 - % of population with no health insurance coverage
# col 84 - margin of error for col 83
health_insurance[,c(-3,-4,-75,-83,-84)] <- NULL
state_codes[which(state_codes[,1] == "DC"),2] <- "District of Columbia"
# converting state identifiers to the two letter code
for(i in 1:nrow(health_insurance)){
new_code = state_codes[which(state_codes[,2] == health_insurance[i,2]),1]
health_insurance[i,2] = new_code
}
View(state_codes)
View(health_insurance)
hospital_beds[,c(-4,-5,-9,-11,-16,-17,18)] <- NULL
hospital_beds[,c(-4,-5,-9,-11,-16,-17,-18)] <- NULL
# getting rid of non-county data
heart_disease[which(heart_disease$GeographicLevel != "County"),] <- NULL
which(heart_disease$GeographicLevel != "County")
View(heart_disease)
heart_disease[which(heart_disease$GeographicLevel != "County"),]
# getting rid of non-county data
heart_disease <- heart_disease[-which(heart_disease$GeographicLevel != "County"),]
# getting rid of non-county data
heart_disease <- heart_disease[-which(heart_disease$GeographicLevel != "County"),]
heart_disease <- read.csv("Heart_disease_mortality_rate.csv", header = T, sep = ",")
heart_disease[,c(1,5,6,7,9,10,11,12,13,15,17,18,19,20)] <- NULL
names(heart_disease)[c(5,6)] <- c("Gender", "Race/Ethnicity")
# getting rid of non-county data
heart_disease <- heart_disease[-which(heart_disease$GeographicLevel != "County"),]
View(heart_disease)
# getting rid of non-county data
heart_disease[-which(heart_disease$GeographicLevel != "County"),]
#and deleting county tag
heart_disease$GeographicLevel <- NULL
names(heart_disease) <- c("State", "County", "Heart Disease Mortality")
names(heart_disease) <- c("State", "County", "Heart Disease Mortality","Gender", "Race/Ethncity")
health_insurance <- read.csv("Health_insurance.csv", header = T, sep = ",")
heart_disease <- read.csv("Heart_disease_mortality_rate.csv", header = T, sep = ",")
hospital_beds <- read.csv("Hospital_beds.csv", header = T, sep = ",")
state_codes <- read.csv("state_codes.csv", header = F, sep = ",")
names(state_codes) <- c("code", "Full")
heart_disease[,c(1,5,6,7,9,10,11,12,13,15,17,18,19,20)] <- NULL
names(heart_disease)[c(5,6)] <- c("Gender", "Race/Ethnicity")
# getting rid of non-county data
heart_disease <- heart_disease[-which(heart_disease$GeographicLevel != "County"),]
#and deleting county tag
heart_disease$GeographicLevel <- NULL
names(heart_disease) <- c("State", "County", "Heart Disease Mortality","Gender", "Race/Ethncity")
# Health Insurance data set
# Dropping all columns except location data and percent of population with No Health Insurance Coverage
# Keeping:
# col 3 - County Name
# col 4 - State Name
# col 75 - Total Civilian Noninstitutionalize Population - with public coverage
# col 83 - % of population with no health insurance coverage
# col 84 - margin of error for col 83
health_insurance[,c(-3,-4,-75,-83,-84)] <- NULL
state_codes[which(state_codes[,1] == "DC"),2] <- "District of Columbia"
# converting state identifiers to the two letter code
for(i in 1:nrow(health_insurance)){
new_code = state_codes[which(state_codes[,2] == health_insurance[i,2]),1]
health_insurance[i,2] = new_code
}
names(health_insurance) <
# Hospital Beds Data Set
# Getting rid of
# col 1/2 - don't need data coordinates
# col 3 OBJECTID - just an ID
# col 6/7 Address - don't need the hospitals address
# col 8 HQ_CITY
# col 10 HQ_ZIP
# col 12 STATE_NAME - already have state code in another column
# col 13 STATE_FIPS
# col 14 CNTY_FIPS
# col 15 FIPS
# col 19 ADULT_ICU_BEDS
# col 20 PEDI_ICU_BEDS
# col 21 BED_UTILIZATION
# col 22 POTENTIAL_INCREASE_IN_BED_CAPAC
# col 23 AVG_VENTILATION_USAGE
hospital_beds[,c(-4,-5,-9,-11,-16,-17,-18)] <- NULL
names(health_insurance) <
# Hospital Beds Data Set
# Getting rid of
# col 1/2 - don't need data coordinates
# col 3 OBJECTID - just an ID
# col 6/7 Address - don't need the hospitals address
# col 8 HQ_CITY
# col 10 HQ_ZIP
# col 12 STATE_NAME - already have state code in another column
# col 13 STATE_FIPS
# col 14 CNTY_FIPS
# col 15 FIPS
# col 19 ADULT_ICU_BEDS
# col 20 PEDI_ICU_BEDS
# col 21 BED_UTILIZATION
# col 22 POTENTIAL_INCREASE_IN_BED_CAPAC
# col 23 AVG_VENTILATION_USAGE
hospital_beds[,c(-4,-5,-9,-11,-16,-17,-18)] <- NULL
health_insurance <- read.csv("Health_insurance.csv", header = T, sep = ",")
heart_disease <- read.csv("Heart_disease_mortality_rate.csv", header = T, sep = ",")
hospital_beds <- read.csv("Hospital_beds.csv", header = T, sep = ",")
state_codes <- read.csv("state_codes.csv", header = F, sep = ",")
names(state_codes) <- c("code", "Full")
health_insurance[which(health_insurance$GEO_PARENT_NAME == "Alabama"),]$GEO_NAME
unique(heart_disease[which(heart_disease$LocationAbbr == "AL"),]$LocationDesc)
sort(unique(hospital_beds[which(hospital_beds$HQ_STATE == "AL"),]$COUNTY_NAME))
print(unique(heart_disease[,1]))
heart_disease[,c(1,5,6,7,9,10,11,12,13,15,17,18,19,20)] <- NULL
names(heart_disease)[c(5,6)] <- c("Gender", "Race/Ethnicity")
# getting rid of non-county data
heart_disease <- heart_disease[-which(heart_disease$GeographicLevel != "County"),]
#and deleting county tag
heart_disease$GeographicLevel <- NULL
names(heart_disease) <- c("State", "County", "Heart Disease Mortality","Gender", "Race/Ethncity")
# Health Insurance data set
# Dropping all columns except location data and percent of population with No Health Insurance Coverage
# Keeping:
# col 3 - County Name
# col 4 - State Name
# col 75 - Total Civilian Noninstitutionalize Population - with public coverage
# col 83 - % of population with no health insurance coverage
# col 84 - margin of error for col 83
health_insurance[,c(-3,-4,-75,-83,-84)] <- NULL
state_codes[which(state_codes[,1] == "DC"),2] <- "District of Columbia"
# converting state identifiers to the two letter code
for(i in 1:nrow(health_insurance)){
new_code = state_codes[which(state_codes[,2] == health_insurance[i,2]),1]
health_insurance[i,2] = new_code
}
hospital_beds[,c(-4,-5,-9,-11,-16,-17,-18)] <- NULL
names(health_insurance) <- c("County", "State", "Population with public coverage", "Percent of pop w/no health insurance", "margin of error")
